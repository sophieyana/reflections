When would you want to use a remote repository rather than keeping all your work local?

To allow syncing data between two repositories, Git has a concept of remote repository. 
This allow you to store location of the repository that you will want to send and receive commits to and from.
You would use a repository to make your changes public once commits are fully ready.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

You might want to make sure commits are fully ready before putting back into local repository. You can also chose what you want to pull into the local repository. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Branches happen on a single repository. Cloning involves taking an existing repository and make one just like it. The original repository can be remote or local. Fork is cloning a repository from GitHub to GitHub.

What is the benefit of having a copy of the last known state of the remote stored locally?

If you have different changes on each repository (locally and remote). You can update just the local copy of the remote branch, leaving the actual local version alone, by running the command “git fetch”. Update the local coy of the remote branch can be nice so you can use git log and git diff to see what changes were introduced both on the local and remote repositories (useful when you are offline). You don’t have to combine the commits right away.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

We would use two different repositories and make changes on our own and review together each file to combine the codes.
The merge would not be automatic and when there are many lines of code, it can become hard to compare two files.